{% block facebook_connect_row %}
    <div class="form-group">
        <label for="fb-login-btn">Connect</label>
        <div class="form-widget">
            <fb:login-button id="fb-login-btn" scope="public_profile,email,pages_manage_posts,user_events,publish_video" onlogin="checkLoginState();" autologoutlink="true" />
        </div>
    </div>
    <div class="form-group">
        <label for="livebroadcast-fb-entity-select">Channel entity</label>
        <div class="form-widget">
            <select id="livebroadcast-fb-entity-select">
                <option>Select your Facebook entity</option>
            </select><br />
            <span id="fb-status">Login with Facebook and choose from your available Facebook entities.</span>
        </div>
    </div>
    {{ form_row(form) }}

    {% block facebook_js %}
        <script type="text/javascript">
            /* global FB: false */
            function statusChangeCallback(response) {
                $('#livebroadcast-fb-entity-select').html('<option>Select your Facebook entity</option>');
                if (response.status === 'connected') {
                    document.getElementById('fb-status').innerHTML = 'Login with Facebook and choose from your available Facebook entities.';
                    getAccountsForLoggedInUser();
                } else if (response.status === 'not_authorized') {
                    document.getElementById('fb-status').innerHTML = 'Please request Facebook access from your Live Stream app maintainer.';
                } else {
                    document.getElementById('fb-status').innerHTML = 'Please log into Facebook.';
                }
            }
            function checkLoginState() {
                FB.getLoginStatus(function(response) {
                    statusChangeCallback(response);
                });
            }
            window.fbAsyncInit = function() {
                FB.init({
                    appId      : '{{ facebookAppId|default('') }}',
                    cookie     : true,
                    xfbml      : true,
                    version    : 'v8.0'
                });
                FB.getLoginStatus(function(response) {
                    statusChangeCallback(response);
                });
                $('#livebroadcast-fb-entity-select').on('change', function(){
                    let selected = $(this).find('option:selected');
                    if (selected.val().length > 0) {
                        $('input#ChannelFacebook_channelName').val(selected.text());
                        $('input#ChannelFacebook_accessToken_accessToken').val(selected.attr('data-access-token'));
                        $('input#ChannelFacebook_fbEntityId').val(selected.val());
                    }
                });
            };
            (function(d, s, id) {
                let js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = "https://connect.facebook.net/en_US/sdk.js";
                fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));
            function getAccountsForLoggedInUser() {
                let channel, option;
                /**
                 * Get URL variables
                 */
                function getUrlVars(url) {
                    let vars = {}, hash;
                    let hashes = url.slice(url.indexOf('?') + 1).split('&');
                    for(let i = 0; i < hashes.length; i++)
                    {
                        hash = hashes[i].split('=');
                        vars[hash[0]] = hash[1];
                    }
                    return vars;
                }
                /**
                 * Make user selectable
                 */
                function makeMeSelectable(meResponse) {
                    if (meResponse.id) {
                        option = $('<option>');
                        option.text('Personal Facebook account: ' + meResponse.name);
                        option.attr('value', meResponse.id);
                        /* Get a long lived access token for the user access token */
                        $.ajax({
                            url: '{{ path('facebook_access_token') }}',
                            data: {
                                'userAccessToken': FB.getAccessToken()
                            },
                            success: function(data) {
                                option.attr('data-access-token', data.accessToken);
                                $('#livebroadcast-fb-entity-select').append(option);
                                FB.broadcast = { accessToken: data.accessToken };
                                /* Retrieve page access tokens with the long lived user access token */
                                FB.api('/me/accounts', {access_token: data.accessToken }, makeAccountSelectable);
                                FB.api('/me/groups', makeGroupsSelectable);
                                FB.api('/me/events', makeEventsSelectable);
                            }
                        });
                    }
                }
                /**
                 * Loop streamable data and create option values
                 */
                function loopStreams(response, accessToken, typeLabel) {
                    let useStaticToken = !!accessToken,
                        useStaticLabel = !!typeLabel;
                    let i = 0, l = response.data.length;
                    for (; i<l; i++) {
                        channel = response.data[i];
                        option = $('<option>');
                        option.text((useStaticLabel ? typeLabel: channel.category) + ': ' + channel.name);
                        option.attr('value', channel.id);
                        option.attr('data-access-token', (useStaticToken ? accessToken : channel.access_token));
                        $('#livebroadcast-fb-entity-select').append(option);
                    }
                }
                /**
                 * Handle a page with data
                 */
                function makeAccountSelectable(response) {
                    loopStreams(response, null, null);
                    if (response.paging && response.paging.next) {
                        let params = getUrlVars(response.paging.next);
                        FB.api('/me/accounts', params, makeAccountSelectable)
                    }
                }
                /**
                 * Make groups selectable
                 * @param response
                 */
                function makeGroupsSelectable(response) {
                    loopStreams(response, FB.broadcast.accessToken, 'Group');
                    if (response.paging && response.paging.next) {
                        let params = getUrlVars(response.paging.next);
                        FB.api('/me/groups', params, makeGroupsSelectable)
                    }
                }
                /**
                 * Make events selectable
                 * @param response
                 */
                function makeEventsSelectable(response) {
                    loopStreams(response, FB.broadcast.accessToken, 'Event');
                    if (response.paging && response.paging.next) {
                        let params = getUrlVars(response.paging.next);
                        FB.api('/me/events', params, makeEventsSelectable)
                    }
                }
                FB.api('/me', makeMeSelectable);
            }
        </script>
    {% endblock %}
{% endblock %}

{% block you_tube_connect_row %}
    <div class="form-group">
        <label for="fb-login-btn">Connect</label>
        <div class="form-widget">
            {% if isAuthenticated|default(false) %}
                <p>Your current YouTube channel selection is: <strong>{{ youTubeChannelName|default('') }}</strong></p>
                <p><button class="btn btn-warning broadcast-youtube-switch">Switch to another YouTube channel/account</button></p>
                <p><button class="btn btn-primary broadcast-youtube-attach">Attach this YouTube channel/account</button></p>
            {% else %}
                <a href="{{ authUrl|default('#') }}" id="yt-login"><i class="fa fa-youtube-play" style="color: #cd201f;"></i>&nbsp;Login with YouTube</a>
            {% endif %}
        </div>
    </div>
    <div class="form-group">
        <span id="yt-status">Login with YouTube and choose from your available YouTube channels.</span>
    </div>
    {{ form_row(form) }}

    {% block you_tube_js %}
        <script type="text/javascript">
            $(document).ready(function(){
                $('.broadcast-youtube-switch').on('click', function(e){
                    e.preventDefault();
                    window.location.href = '{#  @todo path('admin_martin1982_livebroadcast_channel_abstractchannel_youtubeoauth', {'cleartoken': '1'}) #}';
                });
                $('.broadcast-youtube-attach').on('click', function(e){
                    e.preventDefault();
                    $('.input-yt-channelname').attr('value', '{{ youTubeChannelName|default('') }}');
                    $('.input-yt-refreshtoken').attr('value', '{{ youTubeRefreshToken|default('') }}');
                });
            });
    </script>
    {% endblock %}
{% endblock %}